{
    "project": {
        "name": "ice-framework",
        "description": "ice-framework",
        "version": "1.0",
        "url": "http://ice-framework.gamonoid.com/doc/",
        "logo": "http://ice-framework.gamonoid.com/logo.png"
    },
    "files": {
        "ext\\admin\\metadata\\lib.js": {
            "name": "ext\\admin\\metadata\\lib.js",
            "modules": {},
            "classes": {},
            "fors": {},
            "namespaces": {}
        },
        "ext\\admin\\modules\\lib.js": {
            "name": "ext\\admin\\modules\\lib.js",
            "modules": {},
            "classes": {},
            "fors": {},
            "namespaces": {}
        },
        "ext\\admin\\permissions\\lib.js": {
            "name": "ext\\admin\\permissions\\lib.js",
            "modules": {},
            "classes": {},
            "fors": {},
            "namespaces": {}
        },
        "ext\\admin\\profiles\\lib.js": {
            "name": "ext\\admin\\profiles\\lib.js",
            "modules": {},
            "classes": {},
            "fors": {},
            "namespaces": {}
        },
        "ext\\admin\\settings\\lib.js": {
            "name": "ext\\admin\\settings\\lib.js",
            "modules": {},
            "classes": {},
            "fors": {},
            "namespaces": {}
        },
        "ext\\admin\\users\\lib.js": {
            "name": "ext\\admin\\users\\lib.js",
            "modules": {},
            "classes": {},
            "fors": {},
            "namespaces": {}
        },
        "src\\api\\AesCrypt.js": {
            "name": "src\\api\\AesCrypt.js",
            "modules": {},
            "classes": {},
            "fors": {},
            "namespaces": {}
        },
        "src\\api\\Base.js": {
            "name": "src\\api\\Base.js",
            "modules": {},
            "classes": {
                "Base.js": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "src\\classes\\crypt\\Aes.php": {
            "name": "src\\classes\\crypt\\Aes.php",
            "modules": {},
            "classes": {},
            "fors": {},
            "namespaces": {}
        },
        "src\\classes\\crypt\\AesCtr.php": {
            "name": "src\\classes\\crypt\\AesCtr.php",
            "modules": {},
            "classes": {},
            "fors": {},
            "namespaces": {}
        },
        "src\\classes\\BaseService.php": {
            "name": "src\\classes\\BaseService.php",
            "modules": {},
            "classes": {
                "BaseService": 1
            },
            "fors": {},
            "namespaces": {}
        }
    },
    "modules": {},
    "classes": {
        "Base.js": {
            "name": "Base.js",
            "shortname": "Base.js",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "namespace": "",
            "file": "src\\api\\Base.js",
            "line": 25,
            "description": "The base class for providing core functions to all module classes."
        },
        "BaseService": {
            "name": "BaseService",
            "shortname": "BaseService",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "namespace": "",
            "file": "src\\classes\\BaseService.php",
            "line": 26,
            "description": "BaseService class serves as the core logic for managing the application and for handling most \nof the tasks related to retriving and saving data. This can be referred within any module using\nBaseService::getInstance()"
        }
    },
    "classitems": [
        {
            "file": "ext\\admin\\metadata\\lib.js",
            "line": 1,
            "description": "Author: Thilina Hasantha",
            "class": "Base.js"
        },
        {
            "file": "ext\\admin\\metadata\\lib.js",
            "line": 6,
            "description": "CountryAdapter",
            "class": "Base.js"
        },
        {
            "file": "ext\\admin\\metadata\\lib.js",
            "line": 43,
            "description": "ProvinceAdapter",
            "class": "Base.js"
        },
        {
            "file": "ext\\admin\\metadata\\lib.js",
            "line": 90,
            "description": "CurrencyTypeAdapter",
            "class": "Base.js"
        },
        {
            "file": "ext\\admin\\metadata\\lib.js",
            "line": 127,
            "description": "NationalityAdapter",
            "class": "Base.js"
        },
        {
            "file": "ext\\admin\\modules\\lib.js",
            "line": 1,
            "description": "Author: Thilina Hasantha",
            "class": "Base.js"
        },
        {
            "file": "ext\\admin\\modules\\lib.js",
            "line": 6,
            "description": "ModuleAdapter",
            "class": "Base.js"
        },
        {
            "file": "ext\\admin\\permissions\\lib.js",
            "line": 1,
            "description": "Author: Thilina Hasantha",
            "class": "Base.js"
        },
        {
            "file": "ext\\admin\\permissions\\lib.js",
            "line": 6,
            "description": "PermissionAdapter",
            "class": "Base.js"
        },
        {
            "file": "ext\\admin\\profiles\\lib.js",
            "line": 1,
            "description": "Author: Thilina Hasantha",
            "class": "Base.js"
        },
        {
            "file": "ext\\admin\\settings\\lib.js",
            "line": 1,
            "description": "Author: Thilina Hasantha",
            "class": "Base.js"
        },
        {
            "file": "ext\\admin\\settings\\lib.js",
            "line": 6,
            "description": "SettingAdapter",
            "class": "Base.js"
        },
        {
            "file": "ext\\admin\\users\\lib.js",
            "line": 1,
            "description": "Author: Thilina Hasantha",
            "class": "Base.js"
        },
        {
            "file": "src\\api\\AesCrypt.js",
            "line": 9,
            "description": "AES (Rijndael cipher) encryption routines,\n\nReference implementation of FIPS-197 http://csrc.nist.gov/publications/fips/fips197/fips-197.pdf.",
            "class": "Base.js"
        },
        {
            "file": "src\\api\\AesCrypt.js",
            "line": 19,
            "description": "AES Cipher function: encrypt 'input' state with Rijndael algorithm [§5.1];\n  applies Nr rounds (10/12/14) using key schedule w for 'add round key' stage.",
            "params": [
                {
                    "name": "input",
                    "description": "- 16-byte (128-bit) input state array.",
                    "type": "Number[]"
                },
                {
                    "name": "w",
                    "description": "- Key schedule as 2D byte-array (Nr+1 x Nb bytes).",
                    "type": "Number[][]"
                }
            ],
            "return": {
                "description": "Encrypted output state array.",
                "type": "Number[]"
            },
            "class": "Base.js"
        },
        {
            "file": "src\\api\\AesCrypt.js",
            "line": 54,
            "description": "Perform key expansion to generate a key schedule from a cipher key [§5.2].",
            "params": [
                {
                    "name": "key",
                    "description": "- Cipher key as 16/24/32-byte array.",
                    "type": "Number[]"
                }
            ],
            "return": {
                "description": "Expanded key schedule as 2D byte-array (Nr+1 x Nb bytes).",
                "type": "Number[][]"
            },
            "class": "Base.js"
        },
        {
            "file": "src\\api\\AesCrypt.js",
            "line": 95,
            "description": "Apply SBox to state S [§5.1.1]",
            "access": "private",
            "tagname": "",
            "class": "Base.js"
        },
        {
            "file": "src\\api\\AesCrypt.js",
            "line": 107,
            "description": "Shift row r of state S left by r bytes [§5.1.2]",
            "access": "private",
            "tagname": "",
            "class": "Base.js"
        },
        {
            "file": "src\\api\\AesCrypt.js",
            "line": 121,
            "description": "Combine bytes of each col of state S [§5.1.3]",
            "access": "private",
            "tagname": "",
            "class": "Base.js"
        },
        {
            "file": "src\\api\\AesCrypt.js",
            "line": 143,
            "description": "Xor Round Key into state S [§5.1.4]",
            "access": "private",
            "tagname": "",
            "class": "Base.js"
        },
        {
            "file": "src\\api\\AesCrypt.js",
            "line": 155,
            "description": "Apply SBox to 4-byte word w",
            "access": "private",
            "tagname": "",
            "class": "Base.js"
        },
        {
            "file": "src\\api\\AesCrypt.js",
            "line": 165,
            "description": "Rotate 4-byte word w left by one byte",
            "access": "private",
            "tagname": "",
            "class": "Base.js"
        },
        {
            "file": "src\\api\\AesCrypt.js",
            "line": 226,
            "description": "Aes.Ctr: Counter-mode (CTR) wrapper for AES.\n\nThis encrypts a Unicode string to produces a base64 ciphertext using 128/192/256-bit AES,\nand the converse to decrypt an encrypted ciphertext.\n\nSee http://csrc.nist.gov/publications/nistpubs/800-38a/sp800-38a.pdf",
            "uses": [
                "Aes"
            ],
            "class": "Base.js"
        },
        {
            "file": "src\\api\\AesCrypt.js",
            "line": 239,
            "description": "Encrypt a text using AES encryption in Counter mode of operation.\n\nUnicode multi-byte character safe",
            "params": [
                {
                    "name": "plaintext",
                    "description": "- Source text to be encrypted.",
                    "type": "String"
                },
                {
                    "name": "password",
                    "description": "- The password to use to generate a key.",
                    "type": "String"
                },
                {
                    "name": "nBits",
                    "description": "- Number of bits to be used in the key; 128 / 192 / 256.",
                    "type": "Number"
                }
            ],
            "return": {
                "description": "Encrypted text.",
                "type": "String"
            },
            "example": [
                "\n  var encr = Aes.Ctr.encrypt('big secret', 'pāşšŵōřđ', 256); // encr: 'lwGl66VVwVObKIr6of8HVqJr'"
            ],
            "class": "Base.js"
        },
        {
            "file": "src\\api\\AesCrypt.js",
            "line": 319,
            "description": "Decrypt a text encrypted by AES in counter mode of operation",
            "params": [
                {
                    "name": "ciphertext",
                    "description": "- Source text to be encrypted.",
                    "type": "String"
                },
                {
                    "name": "password",
                    "description": "- Password to use to generate a key.",
                    "type": "String"
                },
                {
                    "name": "nBits",
                    "description": "- Number of bits to be used in the key; 128 / 192 / 256.",
                    "type": "Number"
                }
            ],
            "return": {
                "description": "Decrypted text",
                "type": "String"
            },
            "example": [
                "\n  var decr = Aes.Ctr.encrypt('lwGl66VVwVObKIr6of8HVqJr', 'pāşšŵōřđ', 256); // decr: 'big secret'"
            ],
            "class": "Base.js"
        },
        {
            "file": "src\\api\\AesCrypt.js",
            "line": 389,
            "class": "Base.js"
        },
        {
            "file": "src\\api\\AesCrypt.js",
            "line": 397,
            "class": "Base.js"
        },
        {
            "file": "src\\api\\AesCrypt.js",
            "line": 409,
            "description": "- developer.mozilla.org/en-US/docs/Web/API/window.btoa, nodejs.org/api/buffer.html",
            "class": "Base.js"
        },
        {
            "file": "src\\api\\AesCrypt.js",
            "line": 420,
            "class": "Base.js"
        },
        {
            "file": "src\\api\\Base.js",
            "line": 64,
            "description": "Some browsers do not support sending JSON in get parameters. Set this to true to avoid sending JSON",
            "itemtype": "method",
            "name": "setNoJSONRequests",
            "params": [
                {
                    "name": "val",
                    "description": "",
                    "type": "Boolean"
                }
            ],
            "class": "Base.js"
        },
        {
            "file": "src\\api\\Base.js",
            "line": 78,
            "description": "Check if the current user has a permission",
            "itemtype": "method",
            "name": "checkPermission",
            "params": [
                {
                    "name": "permission",
                    "description": "",
                    "type": "String"
                }
            ],
            "example": [
                "\n\tthis.checkPermission(\"Upload/Delete Profile Image\")"
            ],
            "class": "Base.js"
        },
        {
            "file": "src\\api\\Base.js",
            "line": 113,
            "description": "If this method returned false the action buttons in data table for modules will not be displayed\nOverride this method in module lib.js to change behaviour",
            "itemtype": "method",
            "name": "showActionButtons",
            "params": [
                {
                    "name": "permission",
                    "description": "",
                    "type": "String"
                }
            ],
            "example": [
                "\n\tEmployeeLeaveEntitlementAdapter.method('showActionButtons' , function() {\n \treturn false;\n\t});"
            ],
            "class": "Base.js"
        },
        {
            "file": "src\\api\\Base.js",
            "line": 148,
            "description": "Get the current profile",
            "itemtype": "method",
            "name": "getCurrentProfile",
            "return": {
                "description": "Profile of the current user if the profile is not switched if not switched profile"
            },
            "class": "Base.js"
        },
        {
            "file": "src\\api\\Base.js",
            "line": 158,
            "description": "Retrive data required to create select boxes for add new /edit forms for a given module. This is called when loading the module",
            "itemtype": "method",
            "name": "initFieldMasterData",
            "params": [
                {
                    "name": "callback",
                    "description": "call this once loading completed",
                    "type": "Function"
                },
                {
                    "name": "callback",
                    "description": "call this once all field loading completed. This indicate that the form can be displayed saftly",
                    "type": "Function"
                }
            ],
            "example": [
                "\n\tReportAdapter.method('renderForm', function(object) {\n\t\tvar that = this;\n\t\tthis.processFormFieldsWithObject(object);\n\t\tvar cb = function(){\n\t\t\tthat.uber('renderForm',object);\n\t\t};\n\t\tthis.initFieldMasterData(cb);\n     });"
            ],
            "class": "Base.js"
        },
        {
            "file": "src\\classes\\crypt\\Aes.php",
            "line": 9,
            "description": "AES Cipher function: encrypt 'input' with Rijndael algorithm",
            "params": [
                {
                    "name": "input",
                    "description": "message as byte-array (16 bytes)"
                },
                {
                    "name": "w",
                    "description": "key schedule as 2D byte-array (Nr+1 x Nb bytes) - \n             generated from the cipher key by keyExpansion()"
                }
            ],
            "return": {
                "description": "ciphertext as byte-array (16 bytes)"
            },
            "class": "BaseService"
        },
        {
            "file": "src\\classes\\crypt\\Aes.php",
            "line": 83,
            "description": "Key expansion for Rijndael cipher(): performs key expansion on cipher key\nto generate a key schedule",
            "params": [
                {
                    "name": "key",
                    "description": "cipher key byte-array (16 bytes)"
                }
            ],
            "return": {
                "description": "key schedule as 2D byte-array (Nr+1 x Nb bytes)"
            },
            "class": "BaseService"
        },
        {
            "file": "src\\classes\\crypt\\AesCtr.php",
            "line": 10,
            "description": "Encrypt a text using AES encryption in Counter mode of operation\n - see http://csrc.nist.gov/publications/nistpubs/800-38a/sp800-38a.pdf\n\nUnicode multi-byte character safe",
            "params": [
                {
                    "name": "plaintext",
                    "description": "source text to be encrypted"
                },
                {
                    "name": "password",
                    "description": "the password to use to generate a key"
                },
                {
                    "name": "nBits",
                    "description": "number of bits to be used in the key (128, 192, or 256)"
                }
            ],
            "return": {
                "description": "encrypted text"
            },
            "class": "BaseService"
        },
        {
            "file": "src\\classes\\crypt\\AesCtr.php",
            "line": 83,
            "description": "Decrypt a text encrypted by AES in counter mode of operation",
            "params": [
                {
                    "name": "ciphertext",
                    "description": "source text to be decrypted"
                },
                {
                    "name": "password",
                    "description": "the password to use to generate a key"
                },
                {
                    "name": "nBits",
                    "description": "number of bits to be used in the key (128, 192, or 256)"
                }
            ],
            "return": {
                "description": "decrypted text"
            },
            "class": "BaseService"
        },
        {
            "file": "src\\classes\\BaseService.php",
            "line": 54,
            "description": "Get the only instance created for BaseService",
            "itemtype": "method",
            "name": "getInstance",
            "return": {
                "description": "BaseService object",
                "type": "BaseService"
            },
            "class": "BaseService"
        },
        {
            "file": "src\\classes\\BaseService.php",
            "line": 68,
            "description": "Get an array of objects from database",
            "itemtype": "method",
            "name": "get",
            "params": [
                {
                    "name": "$table",
                    "description": "model class name of the table to retive data (e.g for Users table model class name is User)",
                    "type": "String"
                },
                {
                    "name": "$mappingStr",
                    "description": "a JSON string to specify fields of the $table should be mapped to other tables (e.g {\"profile\":[\"Profile\",\"id\",\"first_name+last_name\"]} : this is how the profile field in Users table is mapped to Profile table. In this case users profile field will get filled by Profile first name and last name. The original value in User->profile field will get moved to User->profile_id)",
                    "type": "String"
                },
                {
                    "name": "$filterStr",
                    "description": "a JSON string to specify the ordering of the items (e.g {\"job_title\":\"2\",\"department\":\"2\"}  - this will select only items having job_title = 2 and department = 2)",
                    "type": "String"
                },
                {
                    "name": "$orderBy",
                    "description": "a string to specify the ordering (e.g in_time desc)",
                    "type": "String"
                },
                {
                    "name": "string",
                    "description": "$limit  a string to specify the limit (e.g limit 2)",
                    "type": "String"
                }
            ],
            "return": {
                "description": "an array of objects of type $table",
                "type": "Array"
            },
            "class": "BaseService"
        },
        {
            "file": "src\\classes\\BaseService.php",
            "line": 131,
            "description": "An extention of get method for the use of data tables with ability to search",
            "itemtype": "method",
            "name": "getData",
            "params": [
                {
                    "name": "$table",
                    "description": "model class name of the table to retive data (e.g for Users table model class name is User)",
                    "type": "String"
                },
                {
                    "name": "$mappingStr",
                    "description": "a JSON string to specify fields of the $table should be mapped to other tables (e.g {\"profile\":[\"Profile\",\"id\",\"first_name+last_name\"]} : this is how the profile field in Users table is mapped to Profile table. In this case users profile field will get filled by Profile first name and last name. The original value in User->profile field will get moved to User->profile_id)",
                    "type": "String"
                },
                {
                    "name": "$filterStr",
                    "description": "a JSON string to specify the ordering of the items (e.g {\"job_title\":\"2\",\"department\":\"2\"}  - this will select only items having job_title = 2 and department = 2)",
                    "type": "String"
                },
                {
                    "name": "$orderBy",
                    "description": "a string to specify the ordering (e.g in_time desc)",
                    "type": "String"
                },
                {
                    "name": "string",
                    "description": "$limit  a string to specify the limit (e.g limit 2)",
                    "type": "String"
                },
                {
                    "name": "string",
                    "description": "$searchColumns  a JSON string to specify names of searchable fields (e.g [\"id\",\"employee_id\",\"first_name\",\"last_name\",\"mobile_phone\",\"department\",\"gender\",\"supervisor\"])",
                    "type": "String"
                },
                {
                    "name": "string",
                    "description": "$searchTerm  a string to specify term to search",
                    "type": "String"
                },
                {
                    "name": "string",
                    "description": "$isSubOrdinates  a Boolean to specify if we only need to retive subordinates. Any item is a subordinate item if the item has \"profile\" field defined and the value of \"profile\" field is equal to id of one of the subordinates of currenly logged in profile id. (Any Profile is a subordinate of curently logged in Profile if the supervisor field of a Profile is set to the id of currently logged in Profile)",
                    "type": "Boolean"
                },
                {
                    "name": "string",
                    "description": "$skipProfileRestriction  default if false - TODO - I'll explain this later",
                    "type": "Boolean"
                }
            ],
            "return": {
                "description": "an array of objects of type $table",
                "type": "Array"
            },
            "class": "BaseService"
        },
        {
            "file": "src\\classes\\BaseService.php",
            "line": 232,
            "description": "Propulate field mappings for a given set of objects",
            "itemtype": "method",
            "name": "populateMapping",
            "params": [
                {
                    "name": "$list",
                    "description": "array of model objects",
                    "type": "Array"
                },
                {
                    "name": "$map",
                    "description": "an associative array of Mappings (e.g {\"profile\":[\"Profile\",\"id\",\"first_name+last_name\"]})",
                    "type": "Array"
                }
            ],
            "return": {
                "description": "array of populated objects",
                "type": "Array"
            },
            "class": "BaseService"
        },
        {
            "file": "src\\classes\\BaseService.php",
            "line": 283,
            "description": "Retive one element from db",
            "itemtype": "method",
            "name": "getElement",
            "params": [
                {
                    "name": "$table",
                    "description": "model class name of the table to get data (e.g for Users table model class name is User)",
                    "type": "String"
                },
                {
                    "name": "$table",
                    "description": "id of the item to get from $table",
                    "type": "Integer"
                },
                {
                    "name": "$mappingStr",
                    "description": "a JSON string to specify fields of the $table should be mapped to other tables (e.g {\"profile\":[\"Profile\",\"id\",\"first_name+last_name\"]} : this is how the profile field in Users table is mapped to Profile table. In this case users profile field will get filled by Profile first name and last name. The original value in User->profile field will get moved to User->profile_id)",
                    "type": "String"
                },
                {
                    "name": "$skipSecurityCheck",
                    "description": "if true won't check whether the user has access to that object",
                    "type": "Boolean"
                }
            ],
            "return": {
                "description": "an object of type $table",
                "type": "Object"
            },
            "class": "BaseService"
        },
        {
            "file": "src\\classes\\BaseService.php",
            "line": 348,
            "description": "Add an element to a given table",
            "itemtype": "method",
            "name": "addElement",
            "params": [
                {
                    "name": "$table",
                    "description": "model class name of the table to add data (e.g for Users table model class name is User)",
                    "type": "String"
                },
                {
                    "name": "$obj",
                    "description": "an associative array with field names and values for the new object. If the object id is not empty an existing object will be updated",
                    "type": "Array"
                }
            ],
            "return": {
                "description": "newly added or updated element of type $table",
                "type": "Object"
            },
            "class": "BaseService"
        },
        {
            "file": "src\\classes\\BaseService.php",
            "line": 447,
            "description": "Delete an element if not the $table and $id is defined as a non deletable",
            "itemtype": "method",
            "name": "deleteElement",
            "params": [
                {
                    "name": "$table",
                    "description": "model class name of the table to delete data (e.g for Users table model class name is User)",
                    "type": "String"
                },
                {
                    "name": "$id",
                    "description": "id of the item to delete",
                    "type": "Integer"
                }
            ],
            "return": {
                "description": "NULL"
            },
            "class": "BaseService"
        },
        {
            "file": "src\\classes\\BaseService.php",
            "line": 505,
            "description": "Get associative array of by retriving data from $table using $key field ans key and $value field as value. Mainly used for getting data for populating option lists of select boxes when adding and editing items",
            "itemtype": "method",
            "name": "getFieldValues",
            "params": [
                {
                    "name": "$table",
                    "description": "model class name of the table to get data (e.g for Users table model class name is User)",
                    "type": "String"
                },
                {
                    "name": "$key",
                    "description": "key field name",
                    "type": "String"
                },
                {
                    "name": "$value",
                    "description": "value field name (multiple fileds cam be concatinated using +) - e.g first_name+last_name",
                    "type": "String"
                },
                {
                    "name": "$method",
                    "description": "if not empty, use this menthod to get only a selected set of objects from db instead of retriving all objects. This method should be defined in class $table and should return an array of objects of type $table",
                    "type": "String"
                }
            ],
            "return": {
                "description": "associative array",
                "type": "Array"
            },
            "class": "BaseService"
        },
        {
            "file": "src\\classes\\BaseService.php",
            "line": 559,
            "description": "Set the current logged in user",
            "itemtype": "method",
            "name": "setCurrentUser",
            "params": [
                {
                    "name": "$currentUser",
                    "description": "the current logged in user",
                    "type": "User"
                }
            ],
            "return": {
                "description": "None"
            },
            "class": "BaseService"
        },
        {
            "file": "src\\classes\\BaseService.php",
            "line": 586,
            "description": "Get the currently logged in user from session",
            "itemtype": "method",
            "name": "getCurrentUser",
            "return": {
                "description": "currently logged in user from session",
                "type": "User"
            },
            "class": "BaseService"
        },
        {
            "file": "src\\classes\\BaseService.php",
            "line": 597,
            "description": "Get the Profile id attached to currently logged in user. if the user is switched, this will return the id of switched Profile instead of currently logged in users Prifile id",
            "itemtype": "method",
            "name": "getCurrentProfileId",
            "return": {
                "description": "",
                "type": "Integer"
            },
            "class": "BaseService"
        },
        {
            "file": "src\\classes\\BaseService.php",
            "line": 615,
            "description": "Get User by profile id",
            "itemtype": "method",
            "name": "getUserFromProfileId",
            "params": [
                {
                    "name": "$profileId",
                    "description": "profile id",
                    "type": "Integer"
                }
            ],
            "return": {
                "description": "user object",
                "type": "User"
            },
            "class": "BaseService"
        },
        {
            "file": "src\\classes\\BaseService.php",
            "line": 749,
            "description": "Use user level security functions defined in model classes to check whether a given action type is allowed to be executed by the current user on a given object",
            "itemtype": "method",
            "name": "checkSecureAccess",
            "params": [
                {
                    "name": "$type",
                    "description": "Action type",
                    "type": "String"
                },
                {
                    "name": "$object",
                    "description": "object to test access",
                    "type": "Object"
                }
            ],
            "return": {
                "description": "true or exit",
                "type": "Boolen"
            },
            "class": "BaseService"
        },
        {
            "file": "src\\classes\\BaseService.php",
            "line": 877,
            "description": "Set the audit manager",
            "itemtype": "method",
            "name": "setAuditManager",
            "params": [
                {
                    "name": "$auditManager",
                    "description": "",
                    "type": "AuditManager"
                }
            ],
            "class": "BaseService"
        },
        {
            "file": "src\\classes\\BaseService.php",
            "line": 887,
            "description": "Set the NotificationManager",
            "itemtype": "method",
            "name": "setNotificationManager",
            "params": [
                {
                    "name": "$notificationManager",
                    "description": "",
                    "type": "NotificationManager"
                }
            ],
            "class": "BaseService"
        },
        {
            "file": "src\\classes\\BaseService.php",
            "line": 897,
            "description": "Set the SettingsManager",
            "itemtype": "method",
            "name": "setSettingsManager",
            "params": [
                {
                    "name": "$settingsManager",
                    "description": "",
                    "type": "SettingsManager"
                }
            ],
            "class": "BaseService"
        }
    ],
    "warnings": [
        {
            "message": "replacing incorrect tag: returns with return",
            "line": " src\\api\\AesCrypt.js:19"
        },
        {
            "message": "replacing incorrect tag: returns with return",
            "line": " src\\api\\AesCrypt.js:54"
        },
        {
            "message": "replacing incorrect tag: augments with uses",
            "line": " src\\api\\AesCrypt.js:226"
        },
        {
            "message": "replacing incorrect tag: returns with return",
            "line": " src\\api\\AesCrypt.js:239"
        },
        {
            "message": "replacing incorrect tag: returns with return",
            "line": " src\\api\\AesCrypt.js:319"
        },
        {
            "message": "replacing incorrect tag: returns with return",
            "line": " src\\api\\Base.js:148"
        },
        {
            "message": "Missing item type\nAuthor: Thilina Hasantha",
            "line": " ext\\admin\\metadata\\lib.js:1"
        },
        {
            "message": "Missing item type\nCountryAdapter",
            "line": " ext\\admin\\metadata\\lib.js:6"
        },
        {
            "message": "Missing item type\nProvinceAdapter",
            "line": " ext\\admin\\metadata\\lib.js:43"
        },
        {
            "message": "Missing item type\nCurrencyTypeAdapter",
            "line": " ext\\admin\\metadata\\lib.js:90"
        },
        {
            "message": "Missing item type\nNationalityAdapter",
            "line": " ext\\admin\\metadata\\lib.js:127"
        },
        {
            "message": "Missing item type\nAuthor: Thilina Hasantha",
            "line": " ext\\admin\\modules\\lib.js:1"
        },
        {
            "message": "Missing item type\nModuleAdapter",
            "line": " ext\\admin\\modules\\lib.js:6"
        },
        {
            "message": "Missing item type\nAuthor: Thilina Hasantha",
            "line": " ext\\admin\\permissions\\lib.js:1"
        },
        {
            "message": "Missing item type\nPermissionAdapter",
            "line": " ext\\admin\\permissions\\lib.js:6"
        },
        {
            "message": "Missing item type\nAuthor: Thilina Hasantha",
            "line": " ext\\admin\\profiles\\lib.js:1"
        },
        {
            "message": "Missing item type\nAuthor: Thilina Hasantha",
            "line": " ext\\admin\\settings\\lib.js:1"
        },
        {
            "message": "Missing item type\nSettingAdapter",
            "line": " ext\\admin\\settings\\lib.js:6"
        },
        {
            "message": "Missing item type\nAuthor: Thilina Hasantha",
            "line": " ext\\admin\\users\\lib.js:1"
        },
        {
            "message": "Missing item type\nAES (Rijndael cipher) encryption routines,\n\nReference implementation of FIPS-197 http://csrc.nist.gov/publications/fips/fips197/fips-197.pdf.",
            "line": " src\\api\\AesCrypt.js:9"
        },
        {
            "message": "Missing item type\nAES Cipher function: encrypt 'input' state with Rijndael algorithm [§5.1];\n  applies Nr rounds (10/12/14) using key schedule w for 'add round key' stage.",
            "line": " src\\api\\AesCrypt.js:19"
        },
        {
            "message": "Missing item type\nPerform key expansion to generate a key schedule from a cipher key [§5.2].",
            "line": " src\\api\\AesCrypt.js:54"
        },
        {
            "message": "Missing item type\nApply SBox to state S [§5.1.1]",
            "line": " src\\api\\AesCrypt.js:95"
        },
        {
            "message": "Missing item type\nShift row r of state S left by r bytes [§5.1.2]",
            "line": " src\\api\\AesCrypt.js:107"
        },
        {
            "message": "Missing item type\nCombine bytes of each col of state S [§5.1.3]",
            "line": " src\\api\\AesCrypt.js:121"
        },
        {
            "message": "Missing item type\nXor Round Key into state S [§5.1.4]",
            "line": " src\\api\\AesCrypt.js:143"
        },
        {
            "message": "Missing item type\nApply SBox to 4-byte word w",
            "line": " src\\api\\AesCrypt.js:155"
        },
        {
            "message": "Missing item type\nRotate 4-byte word w left by one byte",
            "line": " src\\api\\AesCrypt.js:165"
        },
        {
            "message": "Missing item type\nAes.Ctr: Counter-mode (CTR) wrapper for AES.\n\nThis encrypts a Unicode string to produces a base64 ciphertext using 128/192/256-bit AES,\nand the converse to decrypt an encrypted ciphertext.\n\nSee http://csrc.nist.gov/publications/nistpubs/800-38a/sp800-38a.pdf",
            "line": " src\\api\\AesCrypt.js:226"
        },
        {
            "message": "Missing item type\nEncrypt a text using AES encryption in Counter mode of operation.\n\nUnicode multi-byte character safe",
            "line": " src\\api\\AesCrypt.js:239"
        },
        {
            "message": "Missing item type\nDecrypt a text encrypted by AES in counter mode of operation",
            "line": " src\\api\\AesCrypt.js:319"
        },
        {
            "message": "Missing item type",
            "line": " src\\api\\AesCrypt.js:389"
        },
        {
            "message": "Missing item type",
            "line": " src\\api\\AesCrypt.js:397"
        },
        {
            "message": "Missing item type\n- developer.mozilla.org/en-US/docs/Web/API/window.btoa, nodejs.org/api/buffer.html",
            "line": " src\\api\\AesCrypt.js:409"
        },
        {
            "message": "Missing item type",
            "line": " src\\api\\AesCrypt.js:420"
        },
        {
            "message": "Missing item type\nAES Cipher function: encrypt 'input' with Rijndael algorithm",
            "line": " src\\classes\\crypt\\Aes.php:9"
        },
        {
            "message": "Missing item type\nKey expansion for Rijndael cipher(): performs key expansion on cipher key\nto generate a key schedule",
            "line": " src\\classes\\crypt\\Aes.php:83"
        },
        {
            "message": "Missing item type\nEncrypt a text using AES encryption in Counter mode of operation\n - see http://csrc.nist.gov/publications/nistpubs/800-38a/sp800-38a.pdf\n\nUnicode multi-byte character safe",
            "line": " src\\classes\\crypt\\AesCtr.php:10"
        },
        {
            "message": "Missing item type\nDecrypt a text encrypted by AES in counter mode of operation",
            "line": " src\\classes\\crypt\\AesCtr.php:83"
        }
    ]
}